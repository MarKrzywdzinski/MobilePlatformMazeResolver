
inzynierka_f103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800402c  0800402c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800402c  0800402c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800402c  0800402c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000014  08004048  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004048  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb94  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fbe  00000000  00000000  0002bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  0002e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014882  00000000  00000000  0002f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b709  00000000  00000000  00043d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072eee  00000000  00000000  0004f443  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003564  00000000  00000000  000c23ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd4 	.word	0x08003fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003fd4 	.word	0x08003fd4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 feeb 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fbc0 	bl	80038ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 ff03 	bl	8000fa2 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fecb 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000010 	.word	0x20000010
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000005c 	.word	0x2000005c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000005c 	.word	0x2000005c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f002 fe9c 	bl	8002fd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fbb1 	bl	8000a00 <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <HAL_ADC_Init+0x1a8>)
 800035c:	4013      	ands	r3, r2
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <HAL_ADC_Start+0x1a>
 800041a:	2302      	movs	r3, #2
 800041c:	e098      	b.n	8000550 <HAL_ADC_Start+0x14c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 fa98 	bl	800095c <ADC_Enable>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 8087 	bne.w	8000546 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a41      	ldr	r2, [pc, #260]	; (8000558 <HAL_ADC_Start+0x154>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <HAL_ADC_Start+0x5e>
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <HAL_ADC_Start+0x158>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d115      	bne.n	800048e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d026      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800048c:	e01d      	b.n	80004ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a2f      	ldr	r2, [pc, #188]	; (800055c <HAL_ADC_Start+0x158>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d004      	beq.n	80004ae <HAL_ADC_Start+0xaa>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_ADC_Start+0x154>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10d      	bne.n	80004ca <HAL_ADC_Start+0xc6>
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <HAL_ADC_Start+0x158>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f023 0206 	bic.w	r2, r3, #6
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	e002      	b.n	80004ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f06f 0202 	mvn.w	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050a:	d113      	bne.n	8000534 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_ADC_Start+0x154>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_Start+0x158>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051e:	2b00      	cmp	r3, #0
 8000520:	d108      	bne.n	8000534 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	e00c      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	e003      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40012800 	.word	0x40012800
 800055c:	40012400 	.word	0x40012400

08000560 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000576:	f7ff fe41 	bl	80001fc <HAL_GetTick>
 800057a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00b      	beq.n	80005a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800058e:	f043 0220 	orr.w	r2, r3, #32
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e0c8      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d12a      	bne.n	8000606 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d123      	bne.n	8000606 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005be:	e01a      	b.n	80005f6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c6:	d016      	beq.n	80005f6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d007      	beq.n	80005de <HAL_ADC_PollForConversion+0x7e>
 80005ce:	f7ff fe15 	bl	80001fc <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d20b      	bcs.n	80005f6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e2:	f043 0204 	orr.w	r2, r3, #4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80005f2:	2303      	movs	r3, #3
 80005f4:	e09e      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0dd      	beq.n	80005c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000604:	e06c      	b.n	80006e0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000606:	4b4d      	ldr	r3, [pc, #308]	; (800073c <HAL_ADC_PollForConversion+0x1dc>)
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	2002      	movs	r0, #2
 800060c:	f001 fb3c 	bl	8001c88 <HAL_RCCEx_GetPeriphCLKFreq>
 8000610:	4603      	mov	r3, r0
 8000612:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6919      	ldr	r1, [r3, #16]
 800061c:	4b48      	ldr	r3, [pc, #288]	; (8000740 <HAL_ADC_PollForConversion+0x1e0>)
 800061e:	400b      	ands	r3, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d118      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf6>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68d9      	ldr	r1, [r3, #12]
 800062a:	4b46      	ldr	r3, [pc, #280]	; (8000744 <HAL_ADC_PollForConversion+0x1e4>)
 800062c:	400b      	ands	r3, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d111      	bne.n	8000656 <HAL_ADC_PollForConversion+0xf6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6919      	ldr	r1, [r3, #16]
 8000638:	4b43      	ldr	r3, [pc, #268]	; (8000748 <HAL_ADC_PollForConversion+0x1e8>)
 800063a:	400b      	ands	r3, r1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d108      	bne.n	8000652 <HAL_ADC_PollForConversion+0xf2>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68d9      	ldr	r1, [r3, #12]
 8000646:	4b41      	ldr	r3, [pc, #260]	; (800074c <HAL_ADC_PollForConversion+0x1ec>)
 8000648:	400b      	ands	r3, r1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <HAL_ADC_PollForConversion+0xf2>
 800064e:	2314      	movs	r3, #20
 8000650:	e020      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000652:	2329      	movs	r3, #41	; 0x29
 8000654:	e01e      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6919      	ldr	r1, [r3, #16]
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <HAL_ADC_PollForConversion+0x1e8>)
 800065e:	400b      	ands	r3, r1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d106      	bne.n	8000672 <HAL_ADC_PollForConversion+0x112>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <HAL_ADC_PollForConversion+0x1ec>)
 800066c:	400b      	ands	r3, r1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00d      	beq.n	800068e <HAL_ADC_PollForConversion+0x12e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6919      	ldr	r1, [r3, #16]
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <HAL_ADC_PollForConversion+0x1f0>)
 800067a:	400b      	ands	r3, r1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d108      	bne.n	8000692 <HAL_ADC_PollForConversion+0x132>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68d9      	ldr	r1, [r3, #12]
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <HAL_ADC_PollForConversion+0x1f0>)
 8000688:	400b      	ands	r3, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <HAL_ADC_PollForConversion+0x132>
 800068e:	2354      	movs	r3, #84	; 0x54
 8000690:	e000      	b.n	8000694 <HAL_ADC_PollForConversion+0x134>
 8000692:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800069a:	e01d      	b.n	80006d8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a2:	d016      	beq.n	80006d2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d007      	beq.n	80006ba <HAL_ADC_PollForConversion+0x15a>
 80006aa:	f7ff fda7 	bl	80001fc <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d20b      	bcs.n	80006d2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	f043 0204 	orr.w	r2, r3, #4
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80006ce:	2303      	movs	r3, #3
 80006d0:	e030      	b.n	8000734 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8dd      	bhi.n	800069c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f06f 0212 	mvn.w	r2, #18
 80006e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000700:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000704:	d115      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800070a:	2b00      	cmp	r3, #0
 800070c:	d111      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d105      	bne.n	8000732 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	20000010 	.word	0x20000010
 8000740:	24924924 	.word	0x24924924
 8000744:	00924924 	.word	0x00924924
 8000748:	12492492 	.word	0x12492492
 800074c:	00492492 	.word	0x00492492
 8000750:	00249249 	.word	0x00249249

08000754 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000784:	2b01      	cmp	r3, #1
 8000786:	d101      	bne.n	800078c <HAL_ADC_ConfigChannel+0x20>
 8000788:	2302      	movs	r3, #2
 800078a:	e0dc      	b.n	8000946 <HAL_ADC_ConfigChannel+0x1da>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d81c      	bhi.n	80007d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	3b05      	subs	r3, #5
 80007ae:	221f      	movs	r2, #31
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4019      	ands	r1, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	3b05      	subs	r3, #5
 80007c8:	fa00 f203 	lsl.w	r2, r0, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
 80007d4:	e03c      	b.n	8000850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d81c      	bhi.n	8000818 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	3b23      	subs	r3, #35	; 0x23
 80007f0:	221f      	movs	r2, #31
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4019      	ands	r1, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	3b23      	subs	r3, #35	; 0x23
 800080a:	fa00 f203 	lsl.w	r2, r0, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	430a      	orrs	r2, r1
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
 8000816:	e01b      	b.n	8000850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	3b41      	subs	r3, #65	; 0x41
 800082a:	221f      	movs	r2, #31
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	4019      	ands	r1, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	3b41      	subs	r3, #65	; 0x41
 8000844:	fa00 f203 	lsl.w	r2, r0, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d91c      	bls.n	8000892 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68d9      	ldr	r1, [r3, #12]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4613      	mov	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	4413      	add	r3, r2
 8000868:	3b1e      	subs	r3, #30
 800086a:	2207      	movs	r2, #7
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	4019      	ands	r1, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6898      	ldr	r0, [r3, #8]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	3b1e      	subs	r3, #30
 8000884:	fa00 f203 	lsl.w	r2, r0, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	e019      	b.n	80008c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6919      	ldr	r1, [r3, #16]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	2207      	movs	r2, #7
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4019      	ands	r1, r3
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	6898      	ldr	r0, [r3, #8]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	fa00 f203 	lsl.w	r2, r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d003      	beq.n	80008d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008d2:	2b11      	cmp	r3, #17
 80008d4:	d132      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_ADC_ConfigChannel+0x1e4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d125      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d126      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b10      	cmp	r3, #16
 8000904:	d11a      	bne.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_ADC_ConfigChannel+0x1e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_ADC_ConfigChannel+0x1ec>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9a      	lsrs	r2, r3, #18
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800091c:	e002      	b.n	8000924 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3b01      	subs	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f9      	bne.n	800091e <HAL_ADC_ConfigChannel+0x1b2>
 800092a:	e007      	b.n	800093c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f043 0220 	orr.w	r2, r3, #32
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40012400 	.word	0x40012400
 8000954:	20000010 	.word	0x20000010
 8000958:	431bde83 	.word	0x431bde83

0800095c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b01      	cmp	r3, #1
 8000978:	d039      	beq.n	80009ee <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0201 	orr.w	r2, r2, #1
 8000988:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <ADC_Enable+0x9c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <ADC_Enable+0xa0>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	0c9b      	lsrs	r3, r3, #18
 8000996:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000998:	e002      	b.n	80009a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f9      	bne.n	800099a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009a6:	f7ff fc29 	bl	80001fc <HAL_GetTick>
 80009aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009ac:	e018      	b.n	80009e0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009ae:	f7ff fc25 	bl	80001fc <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d911      	bls.n	80009e0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f043 0210 	orr.w	r2, r3, #16
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009cc:	f043 0201 	orr.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e007      	b.n	80009f0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1df      	bne.n	80009ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000010 	.word	0x20000010
 80009fc:	431bde83 	.word	0x431bde83

08000a00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d127      	bne.n	8000a6a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 0201 	bic.w	r2, r2, #1
 8000a28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fbe7 	bl	80001fc <HAL_GetTick>
 8000a2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a30:	e014      	b.n	8000a5c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d90d      	bls.n	8000a5c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f043 0210 	orr.w	r2, r3, #16
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e007      	b.n	8000a6c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d0e3      	beq.n	8000a32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8000a74:	b490      	push	{r4, r7}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8000a90:	2302      	movs	r3, #2
 8000a92:	e17a      	b.n	8000d8a <HAL_ADCEx_InjectedConfigChannel+0x316>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d119      	bne.n	8000ad8 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d10c      	bne.n	8000ac6 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab2:	0d9b      	lsrs	r3, r3, #22
 8000ab4:	059b      	lsls	r3, r3, #22
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	03d1      	lsls	r1, r2, #15
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6393      	str	r3, [r2, #56]	; 0x38
 8000ac4:	e04f      	b.n	8000b66 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f043 0220 	orr.w	r2, r3, #32
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e046      	b.n	8000b66 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d82a      	bhi.n	8000b3a <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	330f      	adds	r3, #15
 8000afc:	221f      	movs	r2, #31
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4019      	ands	r1, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	0518      	lsls	r0, r3, #20
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681c      	ldr	r4, [r3, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	330f      	adds	r3, #15
 8000b28:	fa04 f303 	lsl.w	r3, r4, r3
 8000b2c:	ea40 0203 	orr.w	r2, r0, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
 8000b38:	e015      	b.n	8000b66 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	1ad2      	subs	r2, r2, r3
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	330f      	adds	r3, #15
 8000b52:	221f      	movs	r2, #31
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	400a      	ands	r2, r1
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d00c      	beq.n	8000b8e <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	6991      	ldr	r1, [r2, #24]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	7d5b      	ldrb	r3, [r3, #21]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d115      	bne.n	8000bc2 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b9e:	d108      	bne.n	8000bb2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	e007      	b.n	8000bc2 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f043 0220 	orr.w	r2, r3, #32
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	7d1b      	ldrb	r3, [r3, #20]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d114      	bne.n	8000bf4 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	7d5b      	ldrb	r3, [r3, #21]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d108      	bne.n	8000be4 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	e007      	b.n	8000bf4 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f043 0220 	orr.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	d91c      	bls.n	8000c36 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68d9      	ldr	r1, [r3, #12]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3b1e      	subs	r3, #30
 8000c0e:	2207      	movs	r2, #7
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4019      	ands	r1, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6898      	ldr	r0, [r3, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	3b1e      	subs	r3, #30
 8000c28:	fa00 f203 	lsl.w	r2, r0, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	e019      	b.n	8000c6a <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6919      	ldr	r1, [r3, #16]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	2207      	movs	r2, #7
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4019      	ands	r1, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6898      	ldr	r0, [r3, #8]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b10      	cmp	r3, #16
 8000c70:	d003      	beq.n	8000c7a <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c76:	2b11      	cmp	r3, #17
 8000c78:	d107      	bne.n	8000c8a <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c88:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d011      	beq.n	8000cb6 <HAL_ADCEx_InjectedConfigChannel+0x242>
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d01d      	beq.n	8000cd2 <HAL_ADCEx_InjectedConfigChannel+0x25e>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d129      	bne.n	8000cee <HAL_ADCEx_InjectedConfigChannel+0x27a>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ca4:	f023 030f 	bic.w	r3, r3, #15
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	68d1      	ldr	r1, [r2, #12]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8000cb4:	e029      	b.n	8000d0a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc0:	f023 030f 	bic.w	r3, r3, #15
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	68d1      	ldr	r1, [r2, #12]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8000cd0:	e01b      	b.n	8000d0a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cdc:	f023 030f 	bic.w	r3, r3, #15
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	68d1      	ldr	r1, [r2, #12]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8000cec:	e00d      	b.n	8000d0a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cf8:	f023 030f 	bic.w	r3, r3, #15
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	68d1      	ldr	r1, [r2, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8000d08:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d003      	beq.n	8000d1a <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d16:	2b11      	cmp	r3, #17
 8000d18:	d132      	bne.n	8000d80 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d125      	bne.n	8000d70 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d126      	bne.n	8000d80 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d40:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	d11a      	bne.n	8000d80 <HAL_ADCEx_InjectedConfigChannel+0x30c>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	0c9a      	lsrs	r2, r3, #18
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d60:	e002      	b.n	8000d68 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
          {
            wait_loop_index--;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f9      	bne.n	8000d62 <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 8000d6e:	e007      	b.n	8000d80 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f043 0220 	orr.w	r2, r3, #32
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc90      	pop	{r4, r7}
 8000d92:	4770      	bx	lr
 8000d94:	40012400 	.word	0x40012400
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	431bde83 	.word	0x431bde83

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff2d 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff42 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff35 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e127      	b.n	8001220 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8116 	bne.w	800121a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d034      	beq.n	8001060 <HAL_GPIO_Init+0xa4>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d80d      	bhi.n	8001016 <HAL_GPIO_Init+0x5a>
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x9a>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d804      	bhi.n	800100c <HAL_GPIO_Init+0x50>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d031      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d01c      	beq.n	8001044 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e048      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100c:	2b03      	cmp	r3, #3
 800100e:	d043      	beq.n	8001098 <HAL_GPIO_Init+0xdc>
 8001010:	2b11      	cmp	r3, #17
 8001012:	d01b      	beq.n	800104c <HAL_GPIO_Init+0x90>
          break;
 8001014:	e043      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001016:	4a89      	ldr	r2, [pc, #548]	; (800123c <HAL_GPIO_Init+0x280>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d026      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800101c:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_GPIO_Init+0x280>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <HAL_GPIO_Init+0x74>
 8001022:	4a87      	ldr	r2, [pc, #540]	; (8001240 <HAL_GPIO_Init+0x284>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d020      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001028:	4a86      	ldr	r2, [pc, #536]	; (8001244 <HAL_GPIO_Init+0x288>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01d      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 800102e:	e036      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001030:	4a85      	ldr	r2, [pc, #532]	; (8001248 <HAL_GPIO_Init+0x28c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001036:	4a85      	ldr	r2, [pc, #532]	; (800124c <HAL_GPIO_Init+0x290>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d016      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800103c:	4a84      	ldr	r2, [pc, #528]	; (8001250 <HAL_GPIO_Init+0x294>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 8001042:	e02c      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	623b      	str	r3, [r7, #32]
          break;
 800104a:	e028      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	3304      	adds	r3, #4
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e023      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e01e      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	330c      	adds	r3, #12
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e019      	b.n	800109e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001072:	2304      	movs	r3, #4
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e012      	b.n	800109e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d105      	bne.n	800108c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	611a      	str	r2, [r3, #16]
          break;
 800108a:	e008      	b.n	800109e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	615a      	str	r2, [r3, #20]
          break;
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d801      	bhi.n	80010a8 <HAL_GPIO_Init+0xec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	e001      	b.n	80010ac <HAL_GPIO_Init+0xf0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3304      	adds	r3, #4
 80010ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d802      	bhi.n	80010ba <HAL_GPIO_Init+0xfe>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x104>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3b08      	subs	r3, #8
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	210f      	movs	r1, #15
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	6a39      	ldr	r1, [r7, #32]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8096 	beq.w	800121a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001106:	4a54      	ldr	r2, [pc, #336]	; (8001258 <HAL_GPIO_Init+0x29c>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x2a0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x19e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x19a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x196>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a48      	ldr	r2, [pc, #288]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x192>
 800114a:	2303      	movs	r3, #3
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 800114e:	2304      	movs	r3, #4
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 800115a:	2300      	movs	r3, #0
 800115c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800116c:	493a      	ldr	r1, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x29c>)
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4938      	ldr	r1, [pc, #224]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	4933      	ldr	r1, [pc, #204]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	492e      	ldr	r1, [pc, #184]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4929      	ldr	r1, [pc, #164]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	491f      	ldr	r1, [pc, #124]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	491a      	ldr	r1, [pc, #104]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	60cb      	str	r3, [r1, #12]
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001216:	4013      	ands	r3, r2
 8001218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3301      	adds	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f aed0 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 8001230:	bf00      	nop
 8001232:	372c      	adds	r7, #44	; 0x2c
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	10210000 	.word	0x10210000
 8001240:	10110000 	.word	0x10110000
 8001244:	10120000 	.word	0x10120000
 8001248:	10310000 	.word	0x10310000
 800124c:	10320000 	.word	0x10320000
 8001250:	10220000 	.word	0x10220000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f806 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e26c      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8087 	beq.w	8001412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00c      	beq.n	800132a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001310:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d112      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
 800131c:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d10b      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d06c      	beq.n	8001410 <HAL_RCC_OscConfig+0x12c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d168      	bne.n	8001410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e246      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x76>
 800134c:	4b80      	ldr	r3, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a7f      	ldr	r2, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7a      	ldr	r2, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0xbc>
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a71      	ldr	r2, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 80013a0:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6a      	ldr	r2, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7fe ff1c 	bl	80001fc <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7fe ff18 	bl	80001fc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1fa      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe4>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7fe ff08 	bl	80001fc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7fe ff04 	bl	80001fc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1e6      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x10c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d063      	beq.n	80014e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142a:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d11c      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d116      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1ba      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4939      	ldr	r1, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	e03a      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7fe febd 	bl	80001fc <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001486:	f7fe feb9 	bl	80001fc <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e19b      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4927      	ldr	r1, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7fe fe9c 	bl	80001fc <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7fe fe98 	bl	80001fc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e17a      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03a      	beq.n	8001568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7fe fe7c 	bl	80001fc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7fe fe78 	bl	80001fc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e15a      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fada 	bl	8001ae0 <RCC_Delay>
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7fe fe62 	bl	80001fc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e00f      	b.n	800155c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7fe fe5e 	bl	80001fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d908      	bls.n	800155c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e140      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	42420000 	.word	0x42420000
 8001558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e9      	bne.n	800153c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a6 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b97      	ldr	r3, [pc, #604]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a93      	ldr	r2, [pc, #588]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a8a      	ldr	r2, [pc, #552]	; (80017dc <HAL_RCC_OscConfig+0x4f8>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7fe fe1f 	bl	80001fc <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7fe fe1b 	bl	80001fc <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0fd      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b81      	ldr	r3, [pc, #516]	; (80017dc <HAL_RCC_OscConfig+0x4f8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x312>
 80015e8:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a7a      	ldr	r2, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x334>
 80015fe:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a75      	ldr	r2, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b73      	ldr	r3, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4a72      	ldr	r2, [pc, #456]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x356>
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a6c      	ldr	r2, [pc, #432]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a69      	ldr	r2, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a66      	ldr	r2, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7fe fdcf 	bl	80001fc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7fe fdcb 	bl	80001fc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0ab      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b57      	ldr	r3, [pc, #348]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x37e>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7fe fdb9 	bl	80001fc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7fe fdb5 	bl	80001fc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e095      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8081 	beq.w	80017ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d061      	beq.n	800179c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d146      	bne.n	800176e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x4fc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7fe fd89 	bl	80001fc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7fe fd85 	bl	80001fc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e067      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	492d      	ldr	r1, [pc, #180]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a19      	ldr	r1, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	430b      	orrs	r3, r1
 800173a:	4927      	ldr	r1, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x4fc>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7fe fd59 	bl	80001fc <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7fe fd55 	bl	80001fc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e037      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x46a>
 800176c:	e02f      	b.n	80017ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_RCC_OscConfig+0x4fc>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe fd42 	bl	80001fc <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7fe fd3e 	bl	80001fc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e020      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x498>
 800179a:	e018      	b.n	80017ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40007000 	.word	0x40007000
 80017e0:	42420060 	.word	0x42420060

080017e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0d0      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0207 	bic.w	r2, r3, #7
 800180e:	4965      	ldr	r1, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d040      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e073      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06b      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4936      	ldr	r1, [pc, #216]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7fe fc92 	bl	80001fc <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7fe fc8e 	bl	80001fc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e053      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d210      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0207 	bic.w	r2, r3, #7
 800191a:	4922      	ldr	r1, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4601      	mov	r1, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	fa21 f303 	lsr.w	r3, r1, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1cc>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fbf0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08004014 	.word	0x08004014
 80019b0:	20000010 	.word	0x20000010
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	b490      	push	{r4, r7}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019c0:	1d3c      	adds	r4, r7, #4
 80019c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d002      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x40>
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x46>
 80019f6:	e02d      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019fa:	623b      	str	r3, [r7, #32]
      break;
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c5b      	lsrs	r3, r3, #17
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	e004      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	623b      	str	r3, [r7, #32]
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a56:	623b      	str	r3, [r7, #32]
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc90      	pop	{r4, r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	08003fec 	.word	0x08003fec
 8001a6c:	08003ffc 	.word	0x08003ffc
 8001a70:	40021000 	.word	0x40021000
 8001a74:	007a1200 	.word	0x007a1200
 8001a78:	003d0900 	.word	0x003d0900

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000010 	.word	0x20000010

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff2 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08004024 	.word	0x08004024

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	0adb      	lsrs	r3, r3, #11
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08004024 	.word	0x08004024

08001ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <RCC_Delay+0x34>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <RCC_Delay+0x38>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0a5b      	lsrs	r3, r3, #9
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001afc:	bf00      	nop
  }
  while (Delay --);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1e5a      	subs	r2, r3, #1
 8001b02:	60fa      	str	r2, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f9      	bne.n	8001afc <RCC_Delay+0x1c>
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000010 	.word	0x20000010
 8001b18:	10624dd3 	.word	0x10624dd3

08001b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d07d      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d118      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a42      	ldr	r2, [pc, #264]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7c:	f7fe fb3e 	bl	80001fc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	e008      	b.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7fe fb3a 	bl	80001fc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e06d      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02e      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d027      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bd6:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d014      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fb09 	bl	80001fc <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7fe fb05 	bl	80001fc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e036      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4917      	ldr	r1, [pc, #92]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4904      	ldr	r1, [pc, #16]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42420440 	.word	0x42420440

08001c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b08d      	sub	sp, #52	; 0x34
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c90:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001c92:	f107 040c 	add.w	r4, r7, #12
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d07f      	beq.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d002      	beq.n	8001cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d048      	beq.n	8001d56 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001cc4:	e08b      	b.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ccc:	4b48      	ldr	r3, [pc, #288]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07f      	beq.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	0c9b      	lsrs	r3, r3, #18
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d018      	beq.n	8001d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	0c5b      	lsrs	r3, r3, #17
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d04:	4413      	add	r3, r2
 8001d06:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	e004      	b.n	8001d32 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d44:	e048      	b.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d54:	e040      	b.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d66:	d108      	bne.n	8001d7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	e01f      	b.n	8001dba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d109      	bne.n	8001d9a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001d92:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d98:	e00f      	b.n	8001dba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001da4:	d11a      	bne.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d014      	beq.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001db2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001db8:	e010      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001dba:	e00f      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001dbc:	f7ff fe7c 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0b9b      	lsrs	r3, r3, #14
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001ddc:	bf00      	nop
    }
  }
  return (frequency);
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3734      	adds	r7, #52	; 0x34
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	08004000 	.word	0x08004000
 8001dec:	08004010 	.word	0x08004010
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200
 8001df8:	003d0900 	.word	0x003d0900
 8001dfc:	aaaaaaab 	.word	0xaaaaaaab

08001e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e01d      	b.n	8001e4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 ff0e 	bl	8003c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 fa3a 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01d      	b.n	8001ea4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f815 	bl	8001eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 fa0f 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fc70 	bl	80027b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_TIM_PWM_Start+0x60>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d007      	beq.n	8001f14 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40012c00 	.word	0x40012c00

08001f24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fc3e 	bl	80027b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_TIM_PWM_Stop+0x94>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d117      	bne.n	8001f76 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_TIM_PWM_Stop+0x52>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_TIM_PWM_Stop+0x52>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_TIM_PWM_Stop+0x82>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_PWM_Stop+0x82>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012c00 	.word	0x40012c00

08001fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0b4      	b.n	8002140 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	f200 809f 	bhi.w	800212c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	0800212d 	.word	0x0800212d
 8001ffc:	0800212d 	.word	0x0800212d
 8002000:	0800212d 	.word	0x0800212d
 8002004:	08002069 	.word	0x08002069
 8002008:	0800212d 	.word	0x0800212d
 800200c:	0800212d 	.word	0x0800212d
 8002010:	0800212d 	.word	0x0800212d
 8002014:	080020ab 	.word	0x080020ab
 8002018:	0800212d 	.word	0x0800212d
 800201c:	0800212d 	.word	0x0800212d
 8002020:	0800212d 	.word	0x0800212d
 8002024:	080020eb 	.word	0x080020eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9a4 	bl	800237c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0208 	orr.w	r2, r2, #8
 8002042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6999      	ldr	r1, [r3, #24]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	619a      	str	r2, [r3, #24]
      break;
 8002066:	e062      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f9ea 	bl	8002448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      break;
 80020a8:	e041      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa33 	bl	800251c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0208 	orr.w	r2, r2, #8
 80020c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69d9      	ldr	r1, [r3, #28]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]
      break;
 80020e8:	e021      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fa7d 	bl	80025f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	61da      	str	r2, [r3, #28]
      break;
 800212a:	e000      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800212c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_TIM_ConfigClockSource+0x18>
 800215c:	2302      	movs	r3, #2
 800215e:	e0a6      	b.n	80022ae <HAL_TIM_ConfigClockSource+0x166>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800217e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d067      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0x120>
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d80b      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x6c>
 800219c:	2b10      	cmp	r3, #16
 800219e:	d073      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x140>
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d802      	bhi.n	80021aa <HAL_TIM_ConfigClockSource+0x62>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06f      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80021a8:	e078      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d06c      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x140>
 80021ae:	2b30      	cmp	r3, #48	; 0x30
 80021b0:	d06a      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021b2:	e073      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021b4:	2b70      	cmp	r3, #112	; 0x70
 80021b6:	d00d      	beq.n	80021d4 <HAL_TIM_ConfigClockSource+0x8c>
 80021b8:	2b70      	cmp	r3, #112	; 0x70
 80021ba:	d804      	bhi.n	80021c6 <HAL_TIM_ConfigClockSource+0x7e>
 80021bc:	2b50      	cmp	r3, #80	; 0x50
 80021be:	d033      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0xe0>
 80021c0:	2b60      	cmp	r3, #96	; 0x60
 80021c2:	d041      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021c4:	e06a      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d066      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x152>
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d0:	d017      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021d2:	e063      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f000 fac9 	bl	800277a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
      break;
 8002200:	e04c      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f000 fab2 	bl	800277a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002224:	609a      	str	r2, [r3, #8]
      break;
 8002226:	e039      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	461a      	mov	r2, r3
 8002236:	f000 fa29 	bl	800268c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2150      	movs	r1, #80	; 0x50
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fa80 	bl	8002746 <TIM_ITRx_SetConfig>
      break;
 8002246:	e029      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	461a      	mov	r2, r3
 8002256:	f000 fa47 	bl	80026e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2160      	movs	r1, #96	; 0x60
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fa70 	bl	8002746 <TIM_ITRx_SetConfig>
      break;
 8002266:	e019      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	461a      	mov	r2, r3
 8002276:	f000 fa09 	bl	800268c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fa60 	bl	8002746 <TIM_ITRx_SetConfig>
      break;
 8002286:	e009      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 fa57 	bl	8002746 <TIM_ITRx_SetConfig>
      break;
 8002298:	e000      	b.n	800229c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800229a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a29      	ldr	r2, [pc, #164]	; (8002370 <TIM_Base_SetConfig+0xb8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <TIM_Base_SetConfig+0x30>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d007      	beq.n	80022e8 <TIM_Base_SetConfig+0x30>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a26      	ldr	r2, [pc, #152]	; (8002374 <TIM_Base_SetConfig+0xbc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a25      	ldr	r2, [pc, #148]	; (8002378 <TIM_Base_SetConfig+0xc0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <TIM_Base_SetConfig+0xb8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <TIM_Base_SetConfig+0xbc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <TIM_Base_SetConfig+0xc0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <TIM_Base_SetConfig+0xb8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d103      	bne.n	8002360 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	615a      	str	r2, [r3, #20]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800

0800237c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <TIM_OC1_SetConfig+0xc8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10c      	bne.n	80023f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0308 	bic.w	r3, r3, #8
 80023de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <TIM_OC1_SetConfig+0xc8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00

08002448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0210 	bic.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0320 	bic.w	r3, r3, #32
 8002492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <TIM_OC2_SetConfig+0xd0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10d      	bne.n	80024c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a14      	ldr	r2, [pc, #80]	; (8002518 <TIM_OC2_SetConfig+0xd0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d113      	bne.n	80024f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00

0800251c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <TIM_OC3_SetConfig+0xd0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <TIM_OC3_SetConfig+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00

080025f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800263a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	031b      	lsls	r3, r3, #12
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <TIM_OC4_SetConfig+0x98>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d109      	bne.n	8002664 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	019b      	lsls	r3, r3, #6
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	621a      	str	r2, [r3, #32]
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00

0800268c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 0201 	bic.w	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 030a 	bic.w	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	621a      	str	r2, [r3, #32]
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f023 0210 	bic.w	r2, r3, #16
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	621a      	str	r2, [r3, #32]
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	f043 0307 	orr.w	r3, r3, #7
 8002768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	021a      	lsls	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	431a      	orrs	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	609a      	str	r2, [r3, #8]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2201      	movs	r2, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a1a      	ldr	r2, [r3, #32]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002814:	2302      	movs	r3, #2
 8002816:	e032      	b.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002850:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4313      	orrs	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e03d      	b.n	8002920 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e03f      	b.n	80029bc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f001 fa69 	bl	8003e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9b2 	bl	8002cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002982:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002992:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 8083 	bne.w	8002aec <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_UART_Transmit+0x2e>
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07b      	b.n	8002aee <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Transmit+0x40>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e074      	b.n	8002aee <HAL_UART_Transmit+0x12a>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a1a:	f7fd fbef 	bl	80001fc <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a2c:	e042      	b.n	8002ab4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d122      	bne.n	8002a8c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f8f6 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e046      	b.n	8002aee <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a72:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	e017      	b.n	8002ab4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3301      	adds	r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	e013      	b.n	8002ab4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8d3 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e023      	b.n	8002aee <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1b7      	bne.n	8002a2e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2140      	movs	r1, #64	; 0x40
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8ba 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e00a      	b.n	8002aee <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b088      	sub	sp, #32
 8002afa:	af02      	add	r7, sp, #8
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	f040 8090 	bne.w	8002c38 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_UART_Receive+0x2e>
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e088      	b.n	8002c3a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Receive+0x40>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e081      	b.n	8002c3a <HAL_UART_Receive+0x144>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2222      	movs	r2, #34	; 0x22
 8002b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b4c:	f7fd fb56 	bl	80001fc <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b5e:	e05c      	b.n	8002c1a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d12b      	bne.n	8002bd0 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2120      	movs	r1, #32
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f85d 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e053      	b.n	8002c3a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	e030      	b.n	8002c1a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	e024      	b.n	8002c1a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2120      	movs	r1, #32
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f831 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e027      	b.n	8002c3a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	60ba      	str	r2, [r7, #8]
 8002bfe:	b2ca      	uxtb	r2, r1
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e00a      	b.n	8002c1a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d19d      	bne.n	8002b60 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e02c      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d028      	beq.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c62:	f7fd facb 	bl	80001fc <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d21d      	bcs.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e00f      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d0c3      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d12:	f023 030c 	bic.w	r3, r3, #12
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <UART_SetConfig+0x1ac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d14e      	bne.n	8002dde <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7fe feba 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8002d44:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009a      	lsls	r2, r3, #2
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	0119      	lsls	r1, r3, #4
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2064      	movs	r0, #100	; 0x64
 8002d86:	fb00 f303 	mul.w	r3, r0, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a3d      	ldr	r2, [pc, #244]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9c:	4419      	add	r1, r3
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009a      	lsls	r2, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db4:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002db6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	fb00 f303 	mul.w	r3, r0, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	3332      	adds	r3, #50	; 0x32
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	f003 020f 	and.w	r2, r3, #15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	440a      	add	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002ddc:	e04d      	b.n	8002e7a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7fe fe57 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8002de2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009a      	lsls	r2, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	0119      	lsls	r1, r3, #4
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009a      	lsls	r2, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	2064      	movs	r0, #100	; 0x64
 8002e24:	fb00 f303 	mul.w	r3, r0, r3
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	3332      	adds	r3, #50	; 0x32
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3a:	4419      	add	r1, r3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009a      	lsls	r2, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002e54:	fba3 0302 	umull	r0, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	2064      	movs	r0, #100	; 0x64
 8002e5c:	fb00 f303 	mul.w	r3, r0, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	3332      	adds	r3, #50	; 0x32
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <UART_SetConfig+0x1b0>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	440a      	add	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40013800 	.word	0x40013800
 8002e88:	51eb851f 	.word	0x51eb851f

08002e8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
 8002eac:	615a      	str	r2, [r3, #20]
 8002eae:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <MX_ADC1_Init+0xc4>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002eb6:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002eca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002edc:	481b      	ldr	r0, [pc, #108]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002ede:	f7fd f9b9 	bl	8000254 <HAL_ADC_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002ee8:	f000 fcfa 	bl	80038e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002f00:	f7fd fc34 	bl	800076c <HAL_ADC_ConfigChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8002f0a:	f000 fce9 	bl	80038e0 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002f1e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002f22:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_ADC1_Init+0xc0>)
 8002f36:	f7fd fd9d 	bl	8000a74 <HAL_ADCEx_InjectedConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002f40:	f000 fcce 	bl	80038e0 <Error_Handler>
  }

}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000090 	.word	0x20000090
 8002f50:	40012400 	.word	0x40012400

08002f54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <MX_ADC2_Init+0x78>)
 8002f68:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002f82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002f92:	f7fd f95f 	bl	8000254 <HAL_ADC_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002f9c:	f000 fca0 	bl	80038e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_ADC2_Init+0x74>)
 8002fb2:	f7fd fbdb 	bl	800076c <HAL_ADC_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002fbc:	f000 fc90 	bl	80038e0 <Error_Handler>
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000060 	.word	0x20000060
 8002fcc:	40012800 	.word	0x40012800

08002fd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a28      	ldr	r2, [pc, #160]	; (800308c <HAL_ADC_MspInit+0xbc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d122      	bne.n	8003036 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8002ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003020:	2301      	movs	r3, #1
 8003022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003024:	2303      	movs	r3, #3
 8003026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 0318 	add.w	r3, r7, #24
 800302c:	4619      	mov	r1, r3
 800302e:	4819      	ldr	r0, [pc, #100]	; (8003094 <HAL_ADC_MspInit+0xc4>)
 8003030:	f7fd ffc4 	bl	8000fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003034:	e026      	b.n	8003084 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_ADC_MspInit+0xc8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d121      	bne.n	8003084 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6193      	str	r3, [r2, #24]
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_ADC_MspInit+0xc0>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8003070:	2312      	movs	r3, #18
 8003072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003074:	2303      	movs	r3, #3
 8003076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 0318 	add.w	r3, r7, #24
 800307c:	4619      	mov	r1, r3
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <HAL_ADC_MspInit+0xc4>)
 8003080:	f7fd ff9c 	bl	8000fbc <HAL_GPIO_Init>
}
 8003084:	bf00      	nop
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40012400 	.word	0x40012400
 8003090:	40021000 	.word	0x40021000
 8003094:	40010800 	.word	0x40010800
 8003098:	40012800 	.word	0x40012800

0800309c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a38      	ldr	r2, [pc, #224]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030b6:	f043 0310 	orr.w	r3, r3, #16
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a32      	ldr	r2, [pc, #200]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <MX_GPIO_Init+0xfc>)
 80030fe:	f043 0308 	orr.w	r3, r3, #8
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <MX_GPIO_Init+0xfc>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|en2_Pin|en1_Pin, GPIO_PIN_RESET);
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8003116:	4821      	ldr	r0, [pc, #132]	; (800319c <MX_GPIO_Init+0x100>)
 8003118:	f7fe f8aa 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Dir_motor2_Pin|Dir_motor1_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003122:	481f      	ldr	r0, [pc, #124]	; (80031a0 <MX_GPIO_Init+0x104>)
 8003124:	f7fe f8a4 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <MX_GPIO_Init+0x108>)
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 0310 	add.w	r3, r7, #16
 800313a:	4619      	mov	r1, r3
 800313c:	4818      	ldr	r0, [pc, #96]	; (80031a0 <MX_GPIO_Init+0x104>)
 800313e:	f7fd ff3d 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|en2_Pin|en1_Pin;
 8003142:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8003146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2302      	movs	r3, #2
 8003152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4619      	mov	r1, r3
 800315a:	4810      	ldr	r0, [pc, #64]	; (800319c <MX_GPIO_Init+0x100>)
 800315c:	f7fd ff2e 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dir_motor2_Pin|Dir_motor1_Pin;
 8003160:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2302      	movs	r3, #2
 8003170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4619      	mov	r1, r3
 8003178:	4809      	ldr	r0, [pc, #36]	; (80031a0 <MX_GPIO_Init+0x104>)
 800317a:	f7fd ff1f 	bl	8000fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2028      	movs	r0, #40	; 0x28
 8003184:	f7fd fee3 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003188:	2028      	movs	r0, #40	; 0x28
 800318a:	f7fd fefc 	bl	8000f86 <HAL_NVIC_EnableIRQ>

}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40010800 	.word	0x40010800
 80031a0:	40011000 	.word	0x40011000
 80031a4:	10110000 	.word	0x10110000

080031a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ac:	f7fc ffce 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031b0:	f000 fa16 	bl	80035e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b4:	f7ff ff72 	bl	800309c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031b8:	f000 fe0c 	bl	8003dd4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80031bc:	f000 fcce 	bl	8003b5c <MX_TIM3_Init>
  MX_TIM1_Init();
 80031c0:	f000 fc2c 	bl	8003a1c <MX_TIM1_Init>
  MX_ADC1_Init();
 80031c4:	f7ff fe62 	bl	8002e8c <MX_ADC1_Init>
  MX_ADC2_Init();
 80031c8:	f7ff fec4 	bl	8002f54 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80031cc:	f000 fdd8 	bl	8003d80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  huart2 = huart1;
 80031d0:	4a86      	ldr	r2, [pc, #536]	; (80033ec <main+0x244>)
 80031d2:	4b87      	ldr	r3, [pc, #540]	; (80033f0 <main+0x248>)
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80031e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//while(1){
  //pomiar();
//}
HAL_Delay(12000);
 80031ec:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80031f0:	f7fd f80e 	bl	8000210 <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pomiar();
 80031f4:	f000 fa50 	bl	8003698 <pomiar>
	  	  if (RUN == 1){
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <main+0x24c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 815f 	bne.w	80034c0 <main+0x318>
	  		    if(ADCValueLeft < sygnal && ADCValueFront > sygnal)
 8003202:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <main+0x250>)
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	4b7d      	ldr	r3, [pc, #500]	; (80033fc <main+0x254>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d26a      	bcs.n	80032e4 <main+0x13c>
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <main+0x258>)
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	4b7a      	ldr	r3, [pc, #488]	; (80033fc <main+0x254>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d964      	bls.n	80032e4 <main+0x13c>
	  		    {
	  		    	if(ADCValueLeft < 1800 && ADCValueLeft > 700){
 800321a:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <main+0x250>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003222:	d21d      	bcs.n	8003260 <main+0xb8>
 8003224:	4b74      	ldr	r3, [pc, #464]	; (80033f8 <main+0x250>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800322c:	d918      	bls.n	8003260 <main+0xb8>
	  		    						dzialanie = 'F';
 800322e:	4b75      	ldr	r3, [pc, #468]	; (8003404 <main+0x25c>)
 8003230:	2246      	movs	r2, #70	; 0x46
 8003232:	701a      	strb	r2, [r3, #0]
										tablica[pos -1] = dzialanie;
 8003234:	4b74      	ldr	r3, [pc, #464]	; (8003408 <main+0x260>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <main+0x25c>)
 800323c:	7811      	ldrb	r1, [r2, #0]
 800323e:	4a73      	ldr	r2, [pc, #460]	; (800340c <main+0x264>)
 8003240:	54d1      	strb	r1, [r2, r3]
										dzialanie = 0;
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <main+0x25c>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
										jazdaPrzod(krok,preskaler,preskaler);
 8003248:	4b71      	ldr	r3, [pc, #452]	; (8003410 <main+0x268>)
 800324a:	8818      	ldrh	r0, [r3, #0]
 800324c:	4b71      	ldr	r3, [pc, #452]	; (8003414 <main+0x26c>)
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	4b70      	ldr	r3, [pc, #448]	; (8003414 <main+0x26c>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	f000 fa4d 	bl	80036f4 <jazdaPrzod>
										RUN = 1;}
 800325a:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <main+0x24c>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
	  		    	if(ADCValueLeft < 700){
 8003260:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <main+0x250>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003268:	d21a      	bcs.n	80032a0 <main+0xf8>
	  		    		  		    	dzialanie = 'F';
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <main+0x25c>)
 800326c:	2246      	movs	r2, #70	; 0x46
 800326e:	701a      	strb	r2, [r3, #0]
	  		    		  		    	tablica[pos -1] = dzialanie;
 8003270:	4b65      	ldr	r3, [pc, #404]	; (8003408 <main+0x260>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <main+0x25c>)
 8003278:	7811      	ldrb	r1, [r2, #0]
 800327a:	4a64      	ldr	r2, [pc, #400]	; (800340c <main+0x264>)
 800327c:	54d1      	strb	r1, [r2, r3]
	  		    		  		    	dzialanie = 0;
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <main+0x25c>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
	  		    		  		    	jazdaPrzod(krok,preskaler,preskaler+20);
 8003284:	4b62      	ldr	r3, [pc, #392]	; (8003410 <main+0x268>)
 8003286:	8818      	ldrh	r0, [r3, #0]
 8003288:	4b62      	ldr	r3, [pc, #392]	; (8003414 <main+0x26c>)
 800328a:	8819      	ldrh	r1, [r3, #0]
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <main+0x26c>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	f000 fa2d 	bl	80036f4 <jazdaPrzod>
	  		    		  		    	RUN = 1;}
 800329a:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <main+0x24c>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
	  		    	if(ADCValueLeft > 1800){
 80032a0:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <main+0x250>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80032a8:	f240 80d4 	bls.w	8003454 <main+0x2ac>
	  		    		  		    	dzialanie = 'F';
 80032ac:	4b55      	ldr	r3, [pc, #340]	; (8003404 <main+0x25c>)
 80032ae:	2246      	movs	r2, #70	; 0x46
 80032b0:	701a      	strb	r2, [r3, #0]
	  		    		  		    	tablica[pos -1] = dzialanie;
 80032b2:	4b55      	ldr	r3, [pc, #340]	; (8003408 <main+0x260>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <main+0x25c>)
 80032ba:	7811      	ldrb	r1, [r2, #0]
 80032bc:	4a53      	ldr	r2, [pc, #332]	; (800340c <main+0x264>)
 80032be:	54d1      	strb	r1, [r2, r3]
	  		    		  		    	dzialanie = 0;
 80032c0:	4b50      	ldr	r3, [pc, #320]	; (8003404 <main+0x25c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
	  		    		  		    	jazdaPrzod(krok,preskaler,preskaler-20);
 80032c6:	4b52      	ldr	r3, [pc, #328]	; (8003410 <main+0x268>)
 80032c8:	8818      	ldrh	r0, [r3, #0]
 80032ca:	4b52      	ldr	r3, [pc, #328]	; (8003414 <main+0x26c>)
 80032cc:	8819      	ldrh	r1, [r3, #0]
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <main+0x26c>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	3b14      	subs	r3, #20
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 fa0c 	bl	80036f4 <jazdaPrzod>
	  		    		  		    	RUN = 1;}
 80032dc:	4b45      	ldr	r3, [pc, #276]	; (80033f4 <main+0x24c>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
	  		    	if(ADCValueLeft > 1800){
 80032e2:	e0b7      	b.n	8003454 <main+0x2ac>

	  		    }
	  		    else if(ADCValueFront > sygnal && ADCValueLeft > sygnal)
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <main+0x258>)
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	4b44      	ldr	r3, [pc, #272]	; (80033fc <main+0x254>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d92a      	bls.n	8003346 <main+0x19e>
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <main+0x250>)
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <main+0x254>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d924      	bls.n	8003346 <main+0x19e>
	  		    {
	  		    	dzialanie = 'L';
 80032fc:	4b41      	ldr	r3, [pc, #260]	; (8003404 <main+0x25c>)
 80032fe:	224c      	movs	r2, #76	; 0x4c
 8003300:	701a      	strb	r2, [r3, #0]
	  		    	tablica[pos -1] = dzialanie;
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <main+0x260>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a3e      	ldr	r2, [pc, #248]	; (8003404 <main+0x25c>)
 800330a:	7811      	ldrb	r1, [r2, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <main+0x264>)
 800330e:	54d1      	strb	r1, [r2, r3]
	  		    	dzialanie = 0;
 8003310:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <main+0x25c>)
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
	  		    	jazdaLewo(skret90+15);
 8003316:	4b40      	ldr	r3, [pc, #256]	; (8003418 <main+0x270>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	330f      	adds	r3, #15
 800331c:	b29b      	uxth	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa3a 	bl	8003798 <jazdaLewo>
	  		    	HAL_Delay(500);
 8003324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003328:	f7fc ff72 	bl	8000210 <HAL_Delay>
	  		    	jazdaPrzod(krok, preskaler, preskaler);
 800332c:	4b38      	ldr	r3, [pc, #224]	; (8003410 <main+0x268>)
 800332e:	8818      	ldrh	r0, [r3, #0]
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <main+0x26c>)
 8003332:	8819      	ldrh	r1, [r3, #0]
 8003334:	4b37      	ldr	r3, [pc, #220]	; (8003414 <main+0x26c>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f000 f9db 	bl	80036f4 <jazdaPrzod>
	  		    	RUN = 1;
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <main+0x24c>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e086      	b.n	8003454 <main+0x2ac>
	  		    }
	  		    else if (ADCValueFront < sygnal && ADCValueLeft > sygnal){
 8003346:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <main+0x258>)
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <main+0x254>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d22a      	bcs.n	80033a8 <main+0x200>
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <main+0x250>)
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <main+0x254>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d924      	bls.n	80033a8 <main+0x200>

	  		    	dzialanie = 'L';
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <main+0x25c>)
 8003360:	224c      	movs	r2, #76	; 0x4c
 8003362:	701a      	strb	r2, [r3, #0]
	  		    	tablica[pos -1] = dzialanie;
 8003364:	4b28      	ldr	r3, [pc, #160]	; (8003408 <main+0x260>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a26      	ldr	r2, [pc, #152]	; (8003404 <main+0x25c>)
 800336c:	7811      	ldrb	r1, [r2, #0]
 800336e:	4a27      	ldr	r2, [pc, #156]	; (800340c <main+0x264>)
 8003370:	54d1      	strb	r1, [r2, r3]
	  		    	dzialanie = 0;
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <main+0x25c>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
	  		    	jazdaLewo(skret90+15);
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <main+0x270>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	330f      	adds	r3, #15
 800337e:	b29b      	uxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa09 	bl	8003798 <jazdaLewo>
	  		    	HAL_Delay(500);
 8003386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800338a:	f7fc ff41 	bl	8000210 <HAL_Delay>
	  		    	jazdaPrzod(krok, preskaler, preskaler);
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <main+0x268>)
 8003390:	8818      	ldrh	r0, [r3, #0]
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <main+0x26c>)
 8003394:	8819      	ldrh	r1, [r3, #0]
 8003396:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <main+0x26c>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	f000 f9aa 	bl	80036f4 <jazdaPrzod>
	  		    	RUN = 1;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <main+0x24c>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e055      	b.n	8003454 <main+0x2ac>
	  		    }
	  		    else if(ADCValueLeft < sygnal  && ADCValueFront < sygnal)
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <main+0x250>)
 80033aa:	881a      	ldrh	r2, [r3, #0]
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <main+0x254>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d233      	bcs.n	800341c <main+0x274>
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <main+0x258>)
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <main+0x254>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d22d      	bcs.n	800341c <main+0x274>
	  		    {
	  		    	dzialanie = 'R';
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <main+0x25c>)
 80033c2:	2252      	movs	r2, #82	; 0x52
 80033c4:	701a      	strb	r2, [r3, #0]
	  		    	tablica[pos -1] = dzialanie;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <main+0x260>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <main+0x25c>)
 80033ce:	7811      	ldrb	r1, [r2, #0]
 80033d0:	4a0e      	ldr	r2, [pc, #56]	; (800340c <main+0x264>)
 80033d2:	54d1      	strb	r1, [r2, r3]
	  		    	dzialanie = 0;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <main+0x25c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
	  		    	jazdaPrawo(skret90);
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <main+0x270>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa2c 	bl	800383c <jazdaPrawo>
	  		    	RUN = 1;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <main+0x24c>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e033      	b.n	8003454 <main+0x2ac>
 80033ec:	200001dc 	.word	0x200001dc
 80033f0:	2000019c 	.word	0x2000019c
 80033f4:	20000005 	.word	0x20000005
 80033f8:	200000e8 	.word	0x200000e8
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	200000da 	.word	0x200000da
 8003404:	2000011b 	.word	0x2000011b
 8003408:	2000000e 	.word	0x2000000e
 800340c:	20000034 	.word	0x20000034
 8003410:	20000006 	.word	0x20000006
 8003414:	2000000a 	.word	0x2000000a
 8003418:	20000008 	.word	0x20000008
	  		    }
	  		    else {
	  		    	jazdaLewo(1000);
 800341c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003420:	f000 f9ba 	bl	8003798 <jazdaLewo>
	  		    	jazdaPrawo(1000);
 8003424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003428:	f000 fa08 	bl	800383c <jazdaPrawo>
	  		    	jazdaLewo(1000);
 800342c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003430:	f000 f9b2 	bl	8003798 <jazdaLewo>
	  		    	dzialanie = 'K';
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <main+0x408>)
 8003436:	224b      	movs	r2, #75	; 0x4b
 8003438:	701a      	strb	r2, [r3, #0]
	  		    	tablica[pos -1] = dzialanie;
 800343a:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <main+0x40c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	3b01      	subs	r3, #1
 8003440:	4a5b      	ldr	r2, [pc, #364]	; (80035b0 <main+0x408>)
 8003442:	7811      	ldrb	r1, [r2, #0]
 8003444:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <main+0x410>)
 8003446:	54d1      	strb	r1, [r2, r3]
	  		    	dzialanie = 0;
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <main+0x408>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
	  		    	RUN = 0;
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <main+0x414>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
	  		    }


	  		    pomiar();
 8003454:	f000 f920 	bl	8003698 <pomiar>

	  		    pos = pos +1 ;
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <main+0x40c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <main+0x40c>)
 8003462:	701a      	strb	r2, [r3, #0]
	  		    HAL_UART_Receive(&huart2, (uint8_t *)&koniec, 1, 1000);
 8003464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003468:	2201      	movs	r2, #1
 800346a:	4955      	ldr	r1, [pc, #340]	; (80035c0 <main+0x418>)
 800346c:	4855      	ldr	r0, [pc, #340]	; (80035c4 <main+0x41c>)
 800346e:	f7ff fb42 	bl	8002af6 <HAL_UART_Receive>

	  		    if (koniec == '1') {
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <main+0x418>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b31      	cmp	r3, #49	; 0x31
 8003478:	d11e      	bne.n	80034b8 <main+0x310>
	  		    	tablica[pos -1] = 'K';
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <main+0x40c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	4a4d      	ldr	r2, [pc, #308]	; (80035b8 <main+0x410>)
 8003482:	214b      	movs	r1, #75	; 0x4b
 8003484:	54d1      	strb	r1, [r2, r3]
	  		    	HAL_UART_Transmit(&huart2, (uint8_t*)tablica, sizeof(tablica), 1000);
 8003486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800348a:	2228      	movs	r2, #40	; 0x28
 800348c:	494a      	ldr	r1, [pc, #296]	; (80035b8 <main+0x410>)
 800348e:	484d      	ldr	r0, [pc, #308]	; (80035c4 <main+0x41c>)
 8003490:	f7ff fa98 	bl	80029c4 <HAL_UART_Transmit>
	  		    	jazdaLewo(2000);
 8003494:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003498:	f000 f97e 	bl	8003798 <jazdaLewo>
	  		    	jazdaPrawo(4000);
 800349c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80034a0:	f000 f9cc 	bl	800383c <jazdaPrawo>
	  		    	jazdaLewo(2000);
 80034a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034a8:	f000 f976 	bl	8003798 <jazdaLewo>
	  		    	RUN = 0;
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <main+0x414>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	  		    	RUN2 = 1;
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <main+0x420>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
	  		  }

	  		    HAL_Delay(500);
 80034b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034bc:	f7fc fea8 	bl	8000210 <HAL_Delay>
	  		    }
	  	  if (RUN2 == 1){
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <main+0x420>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f47f ae95 	bne.w	80031f4 <main+0x4c>

	  		    if (HAL_UART_Receive(&huart2, (uint8_t*)skandal, 40, 10000) == HAL_OK){
 80034ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80034ce:	2228      	movs	r2, #40	; 0x28
 80034d0:	493e      	ldr	r1, [pc, #248]	; (80035cc <main+0x424>)
 80034d2:	483c      	ldr	r0, [pc, #240]	; (80035c4 <main+0x41c>)
 80034d4:	f7ff fb0f 	bl	8002af6 <HAL_UART_Receive>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f47f ae8a 	bne.w	80031f4 <main+0x4c>
	  		    	jazdaLewo(skret90*2);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <main+0x428>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f955 	bl	8003798 <jazdaLewo>
	  		    	for (i=0; i<sizeof(skandal); i++){
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <main+0x42c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e057      	b.n	80035a6 <main+0x3fe>
	  		    		if (skandal[i] == 'F'){
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <main+0x42c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <main+0x424>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	2b46      	cmp	r3, #70	; 0x46
 8003500:	d108      	bne.n	8003514 <main+0x36c>
	  		    			jazdaPrzod(krok, preskaler, preskaler);
 8003502:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <main+0x430>)
 8003504:	8818      	ldrh	r0, [r3, #0]
 8003506:	4b35      	ldr	r3, [pc, #212]	; (80035dc <main+0x434>)
 8003508:	8819      	ldrh	r1, [r3, #0]
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <main+0x434>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	f000 f8f0 	bl	80036f4 <jazdaPrzod>


	  		    	}	if (skandal[i] == 'R'){
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <main+0x42c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <main+0x424>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	2b52      	cmp	r3, #82	; 0x52
 800351e:	d10d      	bne.n	800353c <main+0x394>
	  		    			jazdaPrawo(skret90);
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <main+0x428>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f989 	bl	800383c <jazdaPrawo>
	  		    			jazdaPrzod(krok, preskaler, preskaler);
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <main+0x430>)
 800352c:	8818      	ldrh	r0, [r3, #0]
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <main+0x434>)
 8003530:	8819      	ldrh	r1, [r3, #0]
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <main+0x434>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f8dc 	bl	80036f4 <jazdaPrzod>

	  		    	}	if (skandal[i] == 'L'){
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <main+0x42c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <main+0x424>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	2b4c      	cmp	r3, #76	; 0x4c
 8003546:	d10d      	bne.n	8003564 <main+0x3bc>
	  		    			jazdaLewo(skret90);
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <main+0x428>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f923 	bl	8003798 <jazdaLewo>
	  		    			jazdaPrzod(krok, preskaler, preskaler);
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <main+0x430>)
 8003554:	8818      	ldrh	r0, [r3, #0]
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <main+0x434>)
 8003558:	8819      	ldrh	r1, [r3, #0]
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <main+0x434>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f000 f8c8 	bl	80036f4 <jazdaPrzod>



	  		    	}	if (skandal[i] == 'K') {
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <main+0x42c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a18      	ldr	r2, [pc, #96]	; (80035cc <main+0x424>)
 800356a:	5cd3      	ldrb	r3, [r2, r3]
 800356c:	2b4b      	cmp	r3, #75	; 0x4b
 800356e:	d115      	bne.n	800359c <main+0x3f4>
	  		    			jazdaLewo(skret90/2);
 8003570:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <main+0x428>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	b29b      	uxth	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f90d 	bl	8003798 <jazdaLewo>
	  		    			jazdaPrawo(skret90);
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <main+0x428>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f95a 	bl	800383c <jazdaPrawo>
	  		    			jazdaLewo(skret90/2);
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <main+0x428>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f901 	bl	8003798 <jazdaLewo>
	  		    			RUN2 = 0;
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <main+0x420>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
	  		    	for (i=0; i<sizeof(skandal); i++){
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <main+0x42c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <main+0x42c>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <main+0x42c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b27      	cmp	r3, #39	; 0x27
 80035ac:	d9a3      	bls.n	80034f6 <main+0x34e>
	  pomiar();
 80035ae:	e621      	b.n	80031f4 <main+0x4c>
 80035b0:	2000011b 	.word	0x2000011b
 80035b4:	2000000e 	.word	0x2000000e
 80035b8:	20000034 	.word	0x20000034
 80035bc:	20000005 	.word	0x20000005
 80035c0:	200000ec 	.word	0x200000ec
 80035c4:	200001dc 	.word	0x200001dc
 80035c8:	20000030 	.word	0x20000030
 80035cc:	200000f0 	.word	0x200000f0
 80035d0:	20000008 	.word	0x20000008
 80035d4:	200000e0 	.word	0x200000e0
 80035d8:	20000006 	.word	0x20000006
 80035dc:	2000000a 	.word	0x2000000a

080035e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b094      	sub	sp, #80	; 0x50
 80035e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ea:	2228      	movs	r2, #40	; 0x28
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fce8 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003610:	2301      	movs	r3, #1
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003614:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800361a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003620:	2301      	movs	r3, #1
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003624:	2302      	movs	r3, #2
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800362e:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fe53 	bl	80012e4 <HAL_RCC_OscConfig>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003644:	f000 f94c 	bl	80038e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003648:	230f      	movs	r3, #15
 800364a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800364c:	2302      	movs	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003658:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe f8bd 	bl	80017e4 <HAL_RCC_ClockConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003670:	f000 f936 	bl	80038e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003674:	2302      	movs	r3, #2
 8003676:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fa4b 	bl	8001b1c <HAL_RCCEx_PeriphCLKConfig>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800368c:	f000 f928 	bl	80038e0 <Error_Handler>
  }
}
 8003690:	bf00      	nop
 8003692:	3750      	adds	r7, #80	; 0x50
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <pomiar>:

/* USER CODE BEGIN 4 */

void pomiar(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0

  HAL_ADC_Start(&hadc1);
 800369c:	4811      	ldr	r0, [pc, #68]	; (80036e4 <pomiar+0x4c>)
 800369e:	f7fc feb1 	bl	8000404 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,1) == HAL_OK)
 80036a2:	2101      	movs	r1, #1
 80036a4:	480f      	ldr	r0, [pc, #60]	; (80036e4 <pomiar+0x4c>)
 80036a6:	f7fc ff5b 	bl	8000560 <HAL_ADC_PollForConversion>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <pomiar+0x26>
		  {
			  ADCValueFront = HAL_ADC_GetValue(&hadc1);
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <pomiar+0x4c>)
 80036b2:	f7fd f84f 	bl	8000754 <HAL_ADC_GetValue>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <pomiar+0x50>)
 80036bc:	801a      	strh	r2, [r3, #0]
		  }
	  HAL_ADC_Start(&hadc2);
 80036be:	480b      	ldr	r0, [pc, #44]	; (80036ec <pomiar+0x54>)
 80036c0:	f7fc fea0 	bl	8000404 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc2,1)== HAL_OK)
 80036c4:	2101      	movs	r1, #1
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <pomiar+0x54>)
 80036c8:	f7fc ff4a 	bl	8000560 <HAL_ADC_PollForConversion>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <pomiar+0x48>
	  		 {
	  			  ADCValueLeft = HAL_ADC_GetValue(&hadc2);
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <pomiar+0x54>)
 80036d4:	f7fd f83e 	bl	8000754 <HAL_ADC_GetValue>
 80036d8:	4603      	mov	r3, r0
 80036da:	b29a      	uxth	r2, r3
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <pomiar+0x58>)
 80036de:	801a      	strh	r2, [r3, #0]


	  		}
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000090 	.word	0x20000090
 80036e8:	200000da 	.word	0x200000da
 80036ec:	20000060 	.word	0x20000060
 80036f0:	200000e8 	.word	0x200000e8

080036f4 <jazdaPrzod>:


void jazdaPrzod( uint16_t Tim, uint16_t Pr1, uint16_t Pr2)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
 80036fe:	460b      	mov	r3, r1
 8003700:	80bb      	strh	r3, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	807b      	strh	r3, [r7, #2]
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8003706:	2100      	movs	r1, #0
 8003708:	481f      	ldr	r0, [pc, #124]	; (8003788 <jazdaPrzod+0x94>)
 800370a:	f7fe fc0b 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 800370e:	2108      	movs	r1, #8
 8003710:	481e      	ldr	r0, [pc, #120]	; (800378c <jazdaPrzod+0x98>)
 8003712:	f7fe fc07 	bl	8001f24 <HAL_TIM_PWM_Stop>

	  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800371c:	481c      	ldr	r0, [pc, #112]	; (8003790 <jazdaPrzod+0x9c>)
 800371e:	f7fd fda7 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003728:	4819      	ldr	r0, [pc, #100]	; (8003790 <jazdaPrzod+0x9c>)
 800372a:	f7fd fda1 	bl	8001270 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Dir_motor1_GPIO_Port, Dir_motor1_Pin, GPIO_PIN_RESET);
 800372e:	2200      	movs	r2, #0
 8003730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003734:	4817      	ldr	r0, [pc, #92]	; (8003794 <jazdaPrzod+0xa0>)
 8003736:	f7fd fd9b 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dir_motor2_GPIO_Port, Dir_motor2_Pin, GPIO_PIN_SET);
 800373a:	2201      	movs	r2, #1
 800373c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003740:	4814      	ldr	r0, [pc, #80]	; (8003794 <jazdaPrzod+0xa0>)
 8003742:	f7fd fd95 	bl	8001270 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_PRESCALER(&htim1, Pr1);
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <jazdaPrzod+0x94>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	88ba      	ldrh	r2, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
	  __HAL_TIM_SET_PRESCALER(&htim3, Pr2);
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <jazdaPrzod+0x98>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28


	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003756:	2100      	movs	r1, #0
 8003758:	480b      	ldr	r0, [pc, #44]	; (8003788 <jazdaPrzod+0x94>)
 800375a:	f7fe fbb1 	bl	8001ec0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800375e:	2108      	movs	r1, #8
 8003760:	480a      	ldr	r0, [pc, #40]	; (800378c <jazdaPrzod+0x98>)
 8003762:	f7fe fbad 	bl	8001ec0 <HAL_TIM_PWM_Start>



	  HAL_Delay(Tim);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fd51 	bl	8000210 <HAL_Delay>


	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 800376e:	2100      	movs	r1, #0
 8003770:	4805      	ldr	r0, [pc, #20]	; (8003788 <jazdaPrzod+0x94>)
 8003772:	f7fe fbd7 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8003776:	2108      	movs	r1, #8
 8003778:	4804      	ldr	r0, [pc, #16]	; (800378c <jazdaPrzod+0x98>)
 800377a:	f7fe fbd3 	bl	8001f24 <HAL_TIM_PWM_Stop>

}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000015c 	.word	0x2000015c
 800378c:	2000011c 	.word	0x2000011c
 8003790:	40010800 	.word	0x40010800
 8003794:	40011000 	.word	0x40011000

08003798 <jazdaLewo>:

void jazdaLewo( uint16_t Tim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]

	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80037a2:	2100      	movs	r1, #0
 80037a4:	4820      	ldr	r0, [pc, #128]	; (8003828 <jazdaLewo+0x90>)
 80037a6:	f7fe fbbd 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 80037aa:	2108      	movs	r1, #8
 80037ac:	481f      	ldr	r0, [pc, #124]	; (800382c <jazdaLewo+0x94>)
 80037ae:	f7fe fbb9 	bl	8001f24 <HAL_TIM_PWM_Stop>

	  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 80037b2:	2200      	movs	r2, #0
 80037b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037b8:	481d      	ldr	r0, [pc, #116]	; (8003830 <jazdaLewo+0x98>)
 80037ba:	f7fd fd59 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037c4:	481a      	ldr	r0, [pc, #104]	; (8003830 <jazdaLewo+0x98>)
 80037c6:	f7fd fd53 	bl	8001270 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Dir_motor1_GPIO_Port, Dir_motor1_Pin, GPIO_PIN_SET);
 80037ca:	2201      	movs	r2, #1
 80037cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037d0:	4818      	ldr	r0, [pc, #96]	; (8003834 <jazdaLewo+0x9c>)
 80037d2:	f7fd fd4d 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dir_motor2_GPIO_Port, Dir_motor2_Pin, GPIO_PIN_SET);
 80037d6:	2201      	movs	r2, #1
 80037d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037dc:	4815      	ldr	r0, [pc, #84]	; (8003834 <jazdaLewo+0x9c>)
 80037de:	f7fd fd47 	bl	8001270 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_PRESCALER(&htim1, preskaler);
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <jazdaLewo+0xa0>)
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <jazdaLewo+0x90>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
	  __HAL_TIM_SET_PRESCALER(&htim3, preskaler);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <jazdaLewo+0xa0>)
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <jazdaLewo+0x94>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80037f6:	2100      	movs	r1, #0
 80037f8:	480b      	ldr	r0, [pc, #44]	; (8003828 <jazdaLewo+0x90>)
 80037fa:	f7fe fb61 	bl	8001ec0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80037fe:	2108      	movs	r1, #8
 8003800:	480a      	ldr	r0, [pc, #40]	; (800382c <jazdaLewo+0x94>)
 8003802:	f7fe fb5d 	bl	8001ec0 <HAL_TIM_PWM_Start>

	  HAL_Delay(Tim);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fd01 	bl	8000210 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 800380e:	2100      	movs	r1, #0
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <jazdaLewo+0x90>)
 8003812:	f7fe fb87 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8003816:	2108      	movs	r1, #8
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <jazdaLewo+0x94>)
 800381a:	f7fe fb83 	bl	8001f24 <HAL_TIM_PWM_Stop>


}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	2000015c 	.word	0x2000015c
 800382c:	2000011c 	.word	0x2000011c
 8003830:	40010800 	.word	0x40010800
 8003834:	40011000 	.word	0x40011000
 8003838:	2000000a 	.word	0x2000000a

0800383c <jazdaPrawo>:

void jazdaPrawo( uint16_t Tim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]

	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8003846:	2100      	movs	r1, #0
 8003848:	4820      	ldr	r0, [pc, #128]	; (80038cc <jazdaPrawo+0x90>)
 800384a:	f7fe fb6b 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 800384e:	2108      	movs	r1, #8
 8003850:	481f      	ldr	r0, [pc, #124]	; (80038d0 <jazdaPrawo+0x94>)
 8003852:	f7fe fb67 	bl	8001f24 <HAL_TIM_PWM_Stop>

	  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800385c:	481d      	ldr	r0, [pc, #116]	; (80038d4 <jazdaPrawo+0x98>)
 800385e:	f7fd fd07 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 8003862:	2200      	movs	r2, #0
 8003864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003868:	481a      	ldr	r0, [pc, #104]	; (80038d4 <jazdaPrawo+0x98>)
 800386a:	f7fd fd01 	bl	8001270 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Dir_motor1_GPIO_Port, Dir_motor1_Pin, GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003874:	4818      	ldr	r0, [pc, #96]	; (80038d8 <jazdaPrawo+0x9c>)
 8003876:	f7fd fcfb 	bl	8001270 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dir_motor2_GPIO_Port, Dir_motor2_Pin, GPIO_PIN_RESET);
 800387a:	2200      	movs	r2, #0
 800387c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003880:	4815      	ldr	r0, [pc, #84]	; (80038d8 <jazdaPrawo+0x9c>)
 8003882:	f7fd fcf5 	bl	8001270 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_PRESCALER(&htim1, preskaler);
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <jazdaPrawo+0xa0>)
 8003888:	881a      	ldrh	r2, [r3, #0]
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <jazdaPrawo+0x90>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
	  __HAL_TIM_SET_PRESCALER(&htim3, preskaler);
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <jazdaPrawo+0xa0>)
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <jazdaPrawo+0x94>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800389a:	2100      	movs	r1, #0
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <jazdaPrawo+0x90>)
 800389e:	f7fe fb0f 	bl	8001ec0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80038a2:	2108      	movs	r1, #8
 80038a4:	480a      	ldr	r0, [pc, #40]	; (80038d0 <jazdaPrawo+0x94>)
 80038a6:	f7fe fb0b 	bl	8001ec0 <HAL_TIM_PWM_Start>

	  HAL_Delay(Tim);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fcaf 	bl	8000210 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80038b2:	2100      	movs	r1, #0
 80038b4:	4805      	ldr	r0, [pc, #20]	; (80038cc <jazdaPrawo+0x90>)
 80038b6:	f7fe fb35 	bl	8001f24 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 80038ba:	2108      	movs	r1, #8
 80038bc:	4804      	ldr	r0, [pc, #16]	; (80038d0 <jazdaPrawo+0x94>)
 80038be:	f7fe fb31 	bl	8001f24 <HAL_TIM_PWM_Stop>



}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000015c 	.word	0x2000015c
 80038d0:	2000011c 	.word	0x2000011c
 80038d4:	40010800 	.word	0x40010800
 80038d8:	40011000 	.word	0x40011000
 80038dc:	2000000a 	.word	0x2000000a

080038e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_MspInit+0x5c>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <HAL_MspInit+0x5c>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6193      	str	r3, [r2, #24]
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_MspInit+0x5c>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_MspInit+0x5c>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <HAL_MspInit+0x5c>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_MspInit+0x5c>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_MspInit+0x60>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_MspInit+0x60>)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40021000 	.word	0x40021000
 800394c:	40010000 	.word	0x40010000

08003950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003960:	e7fe      	b.n	8003960 <HardFault_Handler+0x4>

08003962 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003966:	e7fe      	b.n	8003966 <MemManage_Handler+0x4>

08003968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396c:	e7fe      	b.n	800396c <BusFault_Handler+0x4>

0800396e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003972:	e7fe      	b.n	8003972 <UsageFault_Handler+0x4>

08003974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800399c:	f7fc fc1c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039ac:	f7fd fc78 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <SystemInit+0x5c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <SystemInit+0x5c>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <SystemInit+0x5c>)
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4911      	ldr	r1, [pc, #68]	; (8003a10 <SystemInit+0x5c>)
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <SystemInit+0x60>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <SystemInit+0x5c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <SystemInit+0x5c>)
 80039d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <SystemInit+0x5c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <SystemInit+0x5c>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <SystemInit+0x5c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <SystemInit+0x5c>)
 80039f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80039f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <SystemInit+0x5c>)
 80039fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80039fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SystemInit+0x64>)
 8003a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a06:	609a      	str	r2, [r3, #8]
#endif 
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000
 8003a14:	f8ff0000 	.word	0xf8ff0000
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b096      	sub	sp, #88	; 0x58
 8003a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	2220      	movs	r2, #32
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fab5 	bl	8003fc4 <memset>

  htim1.Instance = TIM1;
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a5c:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <MX_TIM1_Init+0x13c>)
 8003a5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4999;
 8003a60:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a62:	f241 3287 	movw	r2, #4999	; 0x1387
 8003a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a70:	2263      	movs	r2, #99	; 0x63
 8003a72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a80:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a86:	4833      	ldr	r0, [pc, #204]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003a88:	f7fe f9ba 	bl	8001e00 <HAL_TIM_Base_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a92:	f7ff ff25 	bl	80038e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	482c      	ldr	r0, [pc, #176]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003aa4:	f7fe fb50 	bl	8002148 <HAL_TIM_ConfigClockSource>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003aae:	f7ff ff17 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ab2:	4828      	ldr	r0, [pc, #160]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003ab4:	f7fe f9cf 	bl	8001e56 <HAL_TIM_PWM_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003abe:	f7ff ff0f 	bl	80038e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4820      	ldr	r0, [pc, #128]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003ad2:	f7fe fe95 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003adc:	f7ff ff00 	bl	80038e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ae0:	2360      	movs	r3, #96	; 0x60
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8003ae4:	2332      	movs	r3, #50	; 0x32
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003aec:	2300      	movs	r3, #0
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b00:	2200      	movs	r2, #0
 8003b02:	4619      	mov	r1, r3
 8003b04:	4813      	ldr	r0, [pc, #76]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003b06:	f7fe fa59 	bl	8001fbc <HAL_TIM_PWM_ConfigChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003b10:	f7ff fee6 	bl	80038e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003b38:	f7fe fea6 	bl	8002888 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003b42:	f7ff fecd 	bl	80038e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003b46:	4803      	ldr	r0, [pc, #12]	; (8003b54 <MX_TIM1_Init+0x138>)
 8003b48:	f000 f8b0 	bl	8003cac <HAL_TIM_MspPostInit>

}
 8003b4c:	bf00      	nop
 8003b4e:	3758      	adds	r7, #88	; 0x58
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2000015c 	.word	0x2000015c
 8003b58:	40012c00 	.word	0x40012c00

08003b5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	; 0x38
 8003b60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b70:	f107 0320 	add.w	r3, r7, #32
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]
 8003b88:	615a      	str	r2, [r3, #20]
 8003b8a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <MX_TIM3_Init+0xe8>)
 8003b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003b94:	f241 3287 	movw	r2, #4999	; 0x1387
 8003b98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003ba0:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003ba2:	2263      	movs	r2, #99	; 0x63
 8003ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bb2:	4823      	ldr	r0, [pc, #140]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003bb4:	f7fe f924 	bl	8001e00 <HAL_TIM_Base_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003bbe:	f7ff fe8f 	bl	80038e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	481c      	ldr	r0, [pc, #112]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003bd0:	f7fe faba 	bl	8002148 <HAL_TIM_ConfigClockSource>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003bda:	f7ff fe81 	bl	80038e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bde:	4818      	ldr	r0, [pc, #96]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003be0:	f7fe f939 	bl	8001e56 <HAL_TIM_PWM_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003bea:	f7ff fe79 	bl	80038e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bf6:	f107 0320 	add.w	r3, r7, #32
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4810      	ldr	r0, [pc, #64]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003bfe:	f7fe fdff 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003c08:	f7ff fe6a 	bl	80038e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c0c:	2360      	movs	r3, #96	; 0x60
 8003c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8003c10:	2332      	movs	r3, #50	; 0x32
 8003c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	2208      	movs	r2, #8
 8003c20:	4619      	mov	r1, r3
 8003c22:	4807      	ldr	r0, [pc, #28]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003c24:	f7fe f9ca 	bl	8001fbc <HAL_TIM_PWM_ConfigChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003c2e:	f7ff fe57 	bl	80038e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003c32:	4803      	ldr	r0, [pc, #12]	; (8003c40 <MX_TIM3_Init+0xe4>)
 8003c34:	f000 f83a 	bl	8003cac <HAL_TIM_MspPostInit>

}
 8003c38:	bf00      	nop
 8003c3a:	3738      	adds	r7, #56	; 0x38
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	2000011c 	.word	0x2000011c
 8003c44:	40000400 	.word	0x40000400

08003c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_TIM_Base_MspInit+0x58>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10c      	bne.n	8003c74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c64:	6193      	str	r3, [r2, #24]
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003c72:	e010      	b.n	8003c96 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_TIM_Base_MspInit+0x60>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10b      	bne.n	8003c96 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	61d3      	str	r3, [r2, #28]
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_TIM_Base_MspInit+0x5c>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40000400 	.word	0x40000400

08003cac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_TIM_MspPostInit+0xbc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d119      	bne.n	8003d00 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6193      	str	r3, [r2, #24]
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	481d      	ldr	r0, [pc, #116]	; (8003d70 <HAL_TIM_MspPostInit+0xc4>)
 8003cfa:	f7fd f95f 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003cfe:	e02f      	b.n	8003d60 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM3)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <HAL_TIM_MspPostInit+0xc8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12a      	bne.n	8003d60 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003d10:	f043 0310 	orr.w	r3, r3, #16
 8003d14:	6193      	str	r3, [r2, #24]
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_TIM_MspPostInit+0xc0>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4619      	mov	r1, r3
 8003d36:	4810      	ldr	r0, [pc, #64]	; (8003d78 <HAL_TIM_MspPostInit+0xcc>)
 8003d38:	f7fd f940 	bl	8000fbc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_TIM_MspPostInit+0xd0>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <HAL_TIM_MspPostInit+0xd0>)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	6053      	str	r3, [r2, #4]
}
 8003d60:	bf00      	nop
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40010800 	.word	0x40010800
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40010000 	.word	0x40010000

08003d80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <MX_USART1_UART_Init+0x50>)
 8003d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003d8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003da6:	220c      	movs	r2, #12
 8003da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <MX_USART1_UART_Init+0x4c>)
 8003db8:	f7fe fdb7 	bl	800292a <HAL_UART_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dc2:	f7ff fd8d 	bl	80038e0 <Error_Handler>
  }

}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000019c 	.word	0x2000019c
 8003dd0:	40013800 	.word	0x40013800

08003dd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <MX_USART2_UART_Init+0x50>)
 8003ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003de0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <MX_USART2_UART_Init+0x4c>)
 8003e0c:	f7fe fd8d 	bl	800292a <HAL_UART_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e16:	f7ff fd63 	bl	80038e0 <Error_Handler>
  }

}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200001dc 	.word	0x200001dc
 8003e24:	40004400 	.word	0x40004400

08003e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 0318 	add.w	r3, r7, #24
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <HAL_UART_MspInit+0xf8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d132      	bne.n	8003eae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e52:	6193      	str	r3, [r2, #24]
 8003e54:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e60:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6193      	str	r3, [r2, #24]
 8003e6c:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 0318 	add.w	r3, r7, #24
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4826      	ldr	r0, [pc, #152]	; (8003f28 <HAL_UART_MspInit+0x100>)
 8003e8e:	f7fd f895 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea0:	f107 0318 	add.w	r3, r7, #24
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4820      	ldr	r0, [pc, #128]	; (8003f28 <HAL_UART_MspInit+0x100>)
 8003ea8:	f7fd f888 	bl	8000fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003eac:	e034      	b.n	8003f18 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <HAL_UART_MspInit+0x104>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d12f      	bne.n	8003f18 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	61d3      	str	r3, [r2, #28]
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	6193      	str	r3, [r2, #24]
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_UART_MspInit+0xfc>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ee8:	2304      	movs	r3, #4
 8003eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eec:	2302      	movs	r3, #2
 8003eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef4:	f107 0318 	add.w	r3, r7, #24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	480b      	ldr	r0, [pc, #44]	; (8003f28 <HAL_UART_MspInit+0x100>)
 8003efc:	f7fd f85e 	bl	8000fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f00:	2308      	movs	r3, #8
 8003f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0c:	f107 0318 	add.w	r3, r7, #24
 8003f10:	4619      	mov	r1, r3
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <HAL_UART_MspInit+0x100>)
 8003f14:	f7fd f852 	bl	8000fbc <HAL_GPIO_Init>
}
 8003f18:	bf00      	nop
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010800 	.word	0x40010800
 8003f2c:	40004400 	.word	0x40004400

08003f30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f32:	e003      	b.n	8003f3c <LoopCopyDataInit>

08003f34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f3a:	3104      	adds	r1, #4

08003f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f3c:	480a      	ldr	r0, [pc, #40]	; (8003f68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f44:	d3f6      	bcc.n	8003f34 <CopyDataInit>
  ldr r2, =_sbss
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f48:	e002      	b.n	8003f50 <LoopFillZerobss>

08003f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f4c:	f842 3b04 	str.w	r3, [r2], #4

08003f50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f54:	d3f9      	bcc.n	8003f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f56:	f7ff fd2d 	bl	80039b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5a:	f000 f80f 	bl	8003f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f5e:	f7ff f923 	bl	80031a8 <main>
  bx lr
 8003f62:	4770      	bx	lr
  ldr r3, =_sidata
 8003f64:	08004034 	.word	0x08004034
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f6c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8003f70:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8003f74:	2000021c 	.word	0x2000021c

08003f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f78:	e7fe      	b.n	8003f78 <ADC1_2_IRQHandler>
	...

08003f7c <__libc_init_array>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	2500      	movs	r5, #0
 8003f80:	4e0c      	ldr	r6, [pc, #48]	; (8003fb4 <__libc_init_array+0x38>)
 8003f82:	4c0d      	ldr	r4, [pc, #52]	; (8003fb8 <__libc_init_array+0x3c>)
 8003f84:	1ba4      	subs	r4, r4, r6
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	42a5      	cmp	r5, r4
 8003f8a:	d109      	bne.n	8003fa0 <__libc_init_array+0x24>
 8003f8c:	f000 f822 	bl	8003fd4 <_init>
 8003f90:	2500      	movs	r5, #0
 8003f92:	4e0a      	ldr	r6, [pc, #40]	; (8003fbc <__libc_init_array+0x40>)
 8003f94:	4c0a      	ldr	r4, [pc, #40]	; (8003fc0 <__libc_init_array+0x44>)
 8003f96:	1ba4      	subs	r4, r4, r6
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	42a5      	cmp	r5, r4
 8003f9c:	d105      	bne.n	8003faa <__libc_init_array+0x2e>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa4:	4798      	blx	r3
 8003fa6:	3501      	adds	r5, #1
 8003fa8:	e7ee      	b.n	8003f88 <__libc_init_array+0xc>
 8003faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fae:	4798      	blx	r3
 8003fb0:	3501      	adds	r5, #1
 8003fb2:	e7f2      	b.n	8003f9a <__libc_init_array+0x1e>
 8003fb4:	0800402c 	.word	0x0800402c
 8003fb8:	0800402c 	.word	0x0800402c
 8003fbc:	0800402c 	.word	0x0800402c
 8003fc0:	08004030 	.word	0x08004030

08003fc4 <memset>:
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4402      	add	r2, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
